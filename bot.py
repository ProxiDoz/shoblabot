#!/usr/bin/python3.8.9
# -*- coding: utf-8 -*-
# # # # # # –ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ # # # # # #
import telebot                              # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ piTelegramBotAPI
import re                                   # –î–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
import g4f                                  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ–Ω–∫–æ–π
import json                                 # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
import time                                 # –î–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
import datetime                             # ---//---
import random                               # –ü—Ä–∏—Å–≤—è—Ç–æ–π —Ä–∞–Ω–¥–æ–º
import urllib.request as urllib2            # –î–ª—è –ö–∏—Ä—é—Ö–∏–Ω–æ–≥–æ Rapid'a
from urllib.parse import quote              # ---//---
import traceback                            # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª –ø—Ä–∏ —Ç—Ä–∞–±–ª–∞—Ö –±–æ—Ç–∞
import constants                            # –§–∞–π–ª —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
import secret                               # –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏
import helpers.keyboards as keyboards       # –§–∞–π–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
import helpers.service_func as service_func  # –§–∞–π–ª —Å–æ —Å–ª—É–∂–µ–±–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
import helpers.faggot as faggot             # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ faggot handler
import helpers.find_words as find_words     # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ kirov
import helpers.translitsky as translitsky   # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç—Å–∫–æ–≥–æ
import helpers.cbr as cbr                   # –§–∞–π–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–≤ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è
import helpers.scheduled_messages as scheduled_messages  # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

# # # # # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è # # # # # #
bot = telebot.TeleBot(secret.bot_token)  # Token –±–æ—Ç–∞
bot.set_my_commands([
    telebot.types.BotCommand('/discount', 'ü§ë–°–∫–∏–¥–∫–∏'),
    telebot.types.BotCommand('/usd', 'üíµ –ö—É—Ä—Å —Ä—É–±–ª—è'),
    telebot.types.BotCommand('/who', '‚úÖ‚ùå–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'),
    telebot.types.BotCommand('/help', '‚ùì–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
    telebot.types.BotCommand('/meeting', 'üéß–°—Å—ã–ª–∫–∞ —à–æ–±–ª–æ—Å–æ–∑–≤–æ–Ω–∞'),
    telebot.types.BotCommand('/log', 'üìã–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞'),
    telebot.types.BotCommand('/stat', 'ü§ñ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞'),
    telebot.types.BotCommand('/rapid', '‚úÖ –ó–µ–ª–µ–Ω—ã–π Rapid'),
    telebot.types.BotCommand('/yapoznaumir', 'üßê –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å')
])
activity_count = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
with open(secret.meeting_file, 'r') as lang:  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è curr_meeting_poll –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ä–æ—Å—É
    curr_meeting_poll = json.loads(lang.read())


# # # # # # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã # # # # # #
# –í—ã–∑–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –®–æ–±–ª—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ê–ø–æ–ª—É)
@bot.message_handler(commands=['s'])
def server_info(message):
    try:
        if message.from_user.id == secret.apol_id:  # –≠—Ç–æ –ê–ø–æ–ª
            service_func.server_status(bot, message)
        else:
            service_func.send_error(bot, message, 6, '–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /s')
    except Exception as server_info_error:
        service_func.send_error(bot, message, 5, server_info_error)


# –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['yapoznaumir'])
def yapoznaumir(message):
    try:
        service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /yapoznaumir by {constants.shobla_member[message.from_user.id]["name"]}')
        bot.send_message(message.chat.id, constants.enter_question_gpt, reply_to_message_id=message.message_id, reply_markup=telebot.types.ForceReply(True))
        bot.delete_message(message.chat.id, message.message_id)
        service_func.update_activity(bot, 'yapoznaumir')
    except Exception as yapoznaumir_error:
        service_func.send_error(bot, message, 32, yapoznaumir_error)


# –í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è / —Å–ø—Ä–∞–≤–∫–∏
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    try:
        if message.chat.id == secret.shobla_id or message.from_user.id in constants.shobla_member:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã {message.text} by {constants.shobla_member[message.from_user.id]["name"]}')
            bot.send_message(message.chat.id, constants.help_text, reply_markup=keyboards.help_keyboard, parse_mode='Markdown')
            service_func.update_activity(bot, message.text.split('@')[0][1:])
        else:
            service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã {message.text}\n{constants.errors[0 if len(message.text) == 6 else 1]}: '
                                  f'User ID - {message.from_user.id}, user_name - @{message.from_user.username}')
            bot.send_message(message.chat.id, constants.help_text_light, parse_mode='Markdown')
    except Exception as handle_start_help_error:
        service_func.send_error(bot, message, 0 if message.text == '/start' else 1, handle_start_help_error)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç
@bot.message_handler(commands=['who'])
def who_will(message):
    try:
        if message.chat.id == secret.shobla_id:  # –≠—Ç–æ –®–æ–±–ª–∞
            service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /who by {constants.shobla_member[message.from_user.id]["name"]}')
            bot.send_message(secret.shobla_id, constants.enter_question_new, reply_to_message_id=message.message_id, reply_markup=telebot.types.ForceReply(True))
            bot.delete_message(secret.shobla_id, message.message_id)
            service_func.update_activity(bot, 'who')
        elif message.chat.id in constants.shobla_member:
            bot.send_message(message.chat.id, '‚ùå –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ [–®–æ–±–ª–µ](t.me/c/1126587083/)', parse_mode='Markdown')
    except Exception as who_will_error:
        service_func.send_error(bot, message, 7, who_will_error)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∏–¥–æ–∫
@bot.message_handler(commands=['discount'])
def send_discount(message):
    try:
        if message.from_user.id in constants.shobla_member:
            service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /discount by {constants.shobla_member[message.from_user.id]["name"]}')
            bot.send_message(message.chat.id, keyboards.buttons[2][0], reply_markup=keyboards.keyboard_start, parse_mode='Markdown')
            service_func.update_activity(bot, 'discount')
    except Exception as send_discount_error:
        service_func.send_error(bot, message, 8, send_discount_error)


# –í—ã–∑–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stat'])
def statistics(message):
    global activity_count
    try:
        if message.chat.id == secret.shobla_id or message.from_user.id in constants.shobla_member:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            now_time = datetime.datetime.now()
            cur_month = f'{now_time.year}.{now_time.month}'
            with open(secret.activity_file, 'r') as activity_file:  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
                activity_count = json.loads(activity_file.read())
            month_statistics_text = service_func.month_statistics(bot, activity_count, cur_month)
            bot.send_message(message.chat.id, month_statistics_text.replace('–ø—Ä–æ—à–ª—ã–π', '—Ç–µ–∫—É—â–∏–π'), parse_mode='Markdown')
        else:
            service_func.send_error(bot, message, 6, '–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /stat')
    except Exception as statistics_error:
        service_func.send_error(bot, message, 4, statistics_error)


# –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –ø–æ –±–æ—Ç—É
@bot.message_handler(commands=['log'])
def share_log(message):
    try:
        if message.chat.id == secret.shobla_id or message.from_user.id in constants.shobla_member:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            try:
                service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log by {constants.shobla_member[message.from_user.id]["name"]}')
                bot.send_document(message.chat.id, open(secret.log_file, 'rb'), caption='ü§ñüìã Log file')
            except Exception as upload_log_error:
                service_func.send_error(bot, message, 23, upload_log_error)
        else:
            service_func.send_error(bot, message, 6, '–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log')
    except Exception as share_log_error:
        service_func.send_error(bot, message, 24, share_log_error)


# –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É —Å–æ–∑–≤–æ–Ω–∞
@bot.message_handler(commands=['meeting'])
def meeting(message):
    try:
        if message.from_user.id in constants.shobla_member:  # –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /meeting by {constants.shobla_member[message.from_user.id]["name"]}')
            bot.send_photo(message.chat.id, constants.meeting_pic, caption=f'ü§ñ *–ì–æ —Å–æ–∑–≤–æ–Ω*\n{constants.meeting_link}', parse_mode='Markdown')
            service_func.update_activity(bot, 'meeting')
    except Exception as meeting_error:
        service_func.send_error(bot, message, 28, meeting_error)


# –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ —Ä—É–±–ª—è
@bot.message_handler(commands=['usd'])
def usd(message):
    try:
        if message.from_user.id in constants.shobla_member:  # –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            try:
                service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /usd by {constants.shobla_member[message.from_user.id]["name"]}')
                usa_dol, eur, geo_lar, kaz_ten, date = cbr.get_exchange_rates()
                bot.send_photo(message.chat.id, constants.usd_pic[random.randint(0, len(constants.usd_pic) - 1)],
                               caption=(f'üíµ *–ö—É—Ä—Å —Ä—É–±–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞* [–¶–ë–†](https://www.cbr.ru/currency_base/daily/) *–Ω–∞ {date}*:\n'
                                        f'`1$ = {usa_dol}‚ÇΩ`\n`1‚Ç¨ = {eur}‚ÇΩ`\n`1‚Çæ = {geo_lar}‚ÇΩ`\n`100‚Ç∏ = {kaz_ten}‚ÇΩ`'), parse_mode='Markdown')
                service_func.update_activity(bot, 'usd')
            except Exception as cbr_parse_error:
                service_func.send_error(bot, message, 18, f'{cbr.get_exchange_rates()}\n\n{cbr_parse_error}')
    except Exception as usd_error:
        service_func.send_error(bot, message, 31, usd_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ # # # # # #
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–≤–∫–∏ –∑–∞ —Ä—É–ª–µ–º
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace('a', '').replace('–∞', '') == '' and message.chat.id == secret.shobla_id)
def aaa(message):
    try:
        bot.send_message(secret.shobla_id, '–î–µ–≤–∫–∞ –∑–∞ —Ä—É–ª—ë–º') if len(message.text) > 2 else bot.send_message(secret.shobla_id, '–î–≤–∫ –∑ —Ä–ª–º')
        service_func.update_activity(bot, 'car_girl')
    except Exception as aaa_error:
        service_func.send_error(bot, message, 9, aaa_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ Emotional damage
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.damage and message.chat.id == secret.shobla_id)
def damage(message):
    try:
        bot.send_voice(secret.shobla_id, constants.emotional_damage_voice_id)
        service_func.update_activity(bot, 'damage')
    except Exception as damage_error:
        service_func.send_error(bot, message, 10, damage_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ mamma mia
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.mammamia and message.chat.id == secret.shobla_id)
def mamma_mia(message):
    try:
        audio = open(secret.mamma_audio_path, 'rb')
        bot.send_audio(message.chat.id, audio, reply_to_message_id=message.message_id)
        service_func.update_activity(bot, 'mamma')
    except Exception as mamma_mia_error:
        service_func.send_error(bot, message, 30, mamma_mia_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–ê–°–ò–Ø
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.russia and message.chat.id == secret.shobla_id)
def russia(message):
    try:
        bot.send_voice(secret.shobla_id, constants.anthem, 'ü´°')
        service_func.update_activity(bot, 'russia')
    except Exception as russia_error:
        service_func.send_error(bot, message, 11, russia_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—á–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.hey_doc and message.chat.id == secret.shobla_id)
def hey_doc(message):
    try:
        bot.send_document(secret.shobla_id, constants.hey_doc_gif_id, caption='@oxy_genium')
        service_func.update_activity(bot, 'hey_doc')
    except Exception as hey_doc_error:
        service_func.send_error(bot, message, 12, hey_doc_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @team
@bot.message_handler(func=lambda message: message.text and constants.team in message.text.lower() and message.chat.id == secret.shobla_id)
def team(message):
    try:
        bot.send_message(chat_id=secret.shobla_id, disable_notification=False, reply_to_message_id=message.message_id,
                         text=constants.team_text, disable_web_page_preview=True, parse_mode='Markdown')
        service_func.update_activity(bot, 'team')
    except Exception as team_error:
        service_func.send_error(bot, message, 14, team_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @rapid
@bot.message_handler(func=lambda message: message.text and message.text.lower().startswith(constants.rapid) and message.chat.id == secret.shobla_id)
def rapid(message):
    value = ''
    try:
        service_func.update_activity(bot, 'rapid')
        service_func.log(bot, f'–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /rapid by {constants.shobla_member[message.from_user.id]["name"]}')
        # –°–ø–ª–∏—Ç—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–ø–∏–ª–∏–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –±–æ–∫–∞–º
        data = message.text.lower().strip().split(' ')
        '''–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        –∏ –µ—Å–ª–∏ —Ç–æ–∫–∞ 1 —ç–ª–µ–º–µ–Ω—Ç —Ç–æ –∑–Ω–∞—á–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏
        —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ help –ø–æ –¥–µ—Ñ–æ–ª—Ç—É '''
        size = len(data)
        value = 'help' if size == 1 else data[1]
        # –ù—É —Ç—É—Ç –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–∫–∞ data[1] became value
        response = urllib2.urlopen(f'https://rapid.zhuykovkb.ru/rapid?data={quote(value)}&memberid={message.from_user.id}')
        answer = json.loads(str(response.read(), 'utf-8'))
        bot.send_message(secret.shobla_id, answer['message'], parse_mode='Markdown')
        service_func.log(bot, f'–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –†–∞–ø–∏–¥–∞ by {constants.shobla_member[message.from_user.id]["name"]}')
        if answer['message'] == '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω':
            service_func.update_activity(bot, 'rapid_new')
    except Exception as rapid_error:
        bot.send_message(secret.zhuykovkb_id, f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rapid:\n\n–î–∞–Ω–Ω—ã–µ: {quote(value)}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ {rapid_error}')
        service_func.send_error(bot, message, 15, f'{rapid_error}\n–î–∞–Ω–Ω—ã–µ: {quote(value)}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—É–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.suk and message.chat.id == secret.shobla_id)
def badger(message):
    try:
        bot.send_message(secret.shobla_id, '–ë–∞—Ä—Å—É–∫')
        service_func.update_activity(bot, 'cyk')
    except Exception as badger_error:
        service_func.send_error(bot, message, 16, badger_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—é–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.syuk and message.chat.id == secret.shobla_id)
def another_badger(message):
    try:
        bot.send_message(secret.shobla_id, '–ë–∞—Ä—Å—é–∫')
        service_func.update_activity(bot, 'cyk')
    except Exception as another_badger_error:
        service_func.send_error(bot, message, 17, another_badger_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≥–µ—è/–ª–µ—à—É
@bot.message_handler(func=lambda message: True and find_words.word_in_message(message.text, constants.faggot_list))
def faggot_func(message):
    try:
        if random.random() < 0.3:
            eu_country = faggot.getFaggotEUCountryRequest(message.text, constants.faggot_list)
            if eu_country[0]:
                location = eu_country[1]['coords']
                bot.reply_to(message, '–¢—ã —á—Ç–æ —Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ –≥–µ—è? –î–µ—Ä–∂–∏...')
                bot.send_location(message.chat.id, location['lat'], location['lng'])
    except Exception as faggot_func_error:
        service_func.send_error(bot, message, 25, faggot_func_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–∏—Ä–æ–≤–∞
@bot.message_handler(func=lambda message: True and find_words.word_in_message(message.text, constants.kirov))
def kirov(message):
    try:
        audio = open(secret.kirov_audio_path, 'rb')
        bot.send_audio(message.chat.id, audio, reply_to_message_id=message.message_id)
        service_func.update_activity(bot, 'kirov')
    except Exception as kirov_error:
        service_func.send_error(bot, message, 27, kirov_error)


# # # # # # –ü–æ–ª—É—á–∞–µ–Ω–∏–µ file_id –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ # # # # # #
@bot.message_handler(content_types=['photo', 'voice', 'document', 'animation'])
def send_media_id(message):
    try:
        if message.chat.id == secret.apol_id:
            if message.photo:
                bot.send_message(secret.apol_id, message.photo[2].file_id)
            elif message.voice:
                bot.send_message(secret.apol_id, message.voice.file_id)
            elif message.document:
                bot.send_message(secret.apol_id, message.document.file_id)
            elif message.animation:
                bot.send_message(secret.apol_id, message.animation.file_id)
    except Exception as send_media_id_error:
        service_func.send_error(bot, message, 33, send_media_id_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Call Back Data # # # # # #
@bot.callback_query_handler(func=lambda call: True)
def callback_buttons(call):
    try:
        keyboards.button_func(bot, call)
    except Exception as callback_buttons_error:
        service_func.send_error(bot, call.message, 3, callback_buttons_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ # # # # # #
@bot.poll_handler(func=lambda poll: True and poll.is_closed == 1 and str(poll.id) == curr_meeting_poll['poll_id'] and poll.total_voter_count > 1)
def poll_results(poll):
    global curr_meeting_poll
    try:
        meeting_results = []
        for item in poll.options:
            meeting_results.append(item.voter_count)
        max_date = meeting_results[0:4].index(max(meeting_results[0:4]))
        max_time = meeting_results[4:].index(max(meeting_results[4:])) + 4
        curr_meeting_poll['max_date'], curr_meeting_poll['max_time'] = max_date, max_time
        with open(secret.meeting_file, 'w') as meeting_file:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª meeting_file
            meeting_file.write(json.dumps(curr_meeting_poll))
        service_func.log(bot, f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π —Å–æ–∑–≤–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ{constants.meeting_options[max_time]}{constants.meeting_options[max_date][4:]}')
        poll_results_msg = bot.send_message(secret.shobla_id, f'–®–æ–±–ª—è—Ç–∫–∏, —Å–æ–∑–≤–æ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –±—É–¥–µ—Ç –≤{constants.meeting_options[max_date][4:]} {constants.meeting_options[max_time]}',
                                            parse_mode='Markdown')
        bot.pin_chat_message(secret.shobla_id, poll_results_msg.message_id, disable_notification=False)
    except Exception as poll_results_error:
        service_func.log(bot, f'{constants.errors[29]}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {poll_results_error}')
        bot.send_message(secret.apol_id, f'‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ poll_results:\n–°–æ–æ–±—â–µ–Ω–∏–µ: {poll}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{poll_results_error}')


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–ø–ª–∞–µ–≤ –∏ # # # # # #
@bot.message_handler(content_types=['text'])
def send_text(message):
    try:
        text = message.text
        match = re.search(r'(instagram\.com/\S+)', message.text)
        # if translitsky.isTranslitsky(text) and text[0:4] != 'http':
        #     answer = translitsky.doTranslitskyRollback(text)
        #     bot.send_message(message.chat.id, f'`{answer}`', parse_mode='Markdown', reply_to_message_id=message.message_id)
        #     service_func.update_activity(bot, 'transl')
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message is not None and text == '@shoblabot' and message.chat.id == secret.shobla_id:
            try:
                bot.pin_chat_message(chat_id=secret.shobla_id, message_id=message.reply_to_message.message_id, disable_notification=False)
                service_func.log(bot, f'–ø–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è by {constants.shobla_member[message.from_user.id]["name"]}')
                service_func.update_activity(bot, 'pin')
            except Exception as pin_error:
                service_func.send_error(bot, message, 26, pin_error)
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        elif message.reply_to_message is not None and message.reply_to_message.from_user.id == secret.bot_id:
            # –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞
            if message.reply_to_message.text == constants.enter_question_new or message.reply_to_message.text == constants.too_large_question:
                try:
                    if len(text) <= 291:
                        poll_text = f'{constants.shobla_member[message.from_user.id]["name"]}: {text}'
                        poll = bot.send_poll(secret.shobla_id, poll_text, constants.poll_options, is_anonymous=False, allows_multiple_answers=False)
                        stop_button = telebot.types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å üö´',
                                                                         callback_data=f'stop_{poll.message_id}_{message.from_user.id}')
                        keyboard_opros_stop = telebot.types.InlineKeyboardMarkup(row_width=1)
                        keyboard_opros_stop.add(stop_button)
                        bot.delete_message(secret.shobla_id, message.reply_to_message.message_id)
                        bot.edit_message_reply_markup(secret.shobla_id, poll.message_id, reply_markup=keyboard_opros_stop)
                        bot.delete_message(secret.shobla_id, message.message_id)
                        bot.pin_chat_message(secret.shobla_id, poll.message_id, disable_notification=False)
                        service_func.log(bot, f'—Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å by {constants.shobla_member[message.from_user.id]["name"]}')
                        service_func.update_activity(bot, 'opros')
                    else:
                        force_reply = telebot.types.ForceReply(True)
                        bot.delete_message(secret.shobla_id, message.reply_to_message.message_id)
                        bot.send_message(message.chat.id, constants.too_large_question, reply_to_message_id=message.message_id, reply_markup=force_reply)
                except Exception as poll_reply_error:
                    service_func.send_error(bot, message, 19, poll_reply_error)
            # –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ–Ω–∫–µ
            elif message.reply_to_message.text == constants.enter_question_gpt:
                try:
                    response = g4f.ChatCompletion.create(model='gpt-3.5-turbo-16k', messages=[{"role": "user", "content": message.text}], stream=False)
                    bot.send_message(message.chat.id, response, reply_to_message_id=message.message_id, parse_mode='Markdown')
                except Exception as g4f_error:
                    service_func.send_error(bot, message, 32, g4f_error)
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–∑ Instagram
        elif match:
            new_url = re.sub(r'instagram\.com', 'ddinstagram.com', match.group(1))  # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–º–µ–Ω –Ω–∞ ddinstagram.com
            bot.send_message(message.chat.id, new_url, reply_to_message_id=message.message_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π
    except Exception as send_text_error:
        service_func.send_error(bot, message, 20, send_text_error)


# # # # # # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π # # # # # #
try:
    scheduled_messages.send_message(bot)
except Exception as e:
    bot.send_message(secret.apol_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ scheduled_messages.send_message\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}')
    service_func.log(bot, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ scheduled_messages.send_message\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}')

try:
    service_func.log(bot, '–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ bot.infinity_polling()')
    bot.infinity_polling()
except Exception as e:
    service_func.log(bot, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}')
    with open(secret.log_file, 'a') as log_file_stream:
        traceback.print_exc(file=log_file_stream)
    bot.send_message(secret.apol_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}')

try:
    with open(secret.log_file, 'a') as log_file_flow:
        log_file_flow.write(f'\nSTART\n{time.ctime(time.time())} - –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞\n')
except Exception as e:
    bot.send_message(secret.apol_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ start_time:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}')
