#!/usr/bin/python3.8.9
# -*- coding: utf-8 -*-
# # # # # # –ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ # # # # # #
import telebot                              # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ piTelegramBotAPI
import re                                   # –î–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
import os                                   # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
import g4f                                  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ–Ω–∫–æ–π
import json                                 # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
import time                                 # –î–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
import datetime                             # ---//---
import psutil                               # –î–ª—è –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–ó–£ —Å–µ—Ä–≤–µ—Ä–∞
import random                               # –ü—Ä–∏—Å–≤—è—Ç–æ–π —Ä–∞–Ω–¥–æ–º
import threading                            # –î–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
import urllib.request as urllib2            # –î–ª—è –ö–∏—Ä—é—Ö–∏–Ω–æ–≥–æ Rapid'a
from urllib.parse import quote              # ---//---
import traceback                            # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª –ø—Ä–∏ —Ç—Ä–∞–±–ª–∞—Ö –±–æ—Ç–∞
import constants                            # –§–∞–π–ª —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
import secret                               # –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏
import helpers.faggot as faggot             # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ faggot handler
import helpers.find_words as find_words     # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ kirov
import helpers.translitsky as translitsky   # –§–∞–π–ª –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç—Å–∫–æ–≥–æ
import helpers.cbr as cbr                   # –§–∞–π–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–≤ –∫—É—Ä—Å–∞ —Ä—É–±–ª—è

# # # # # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è # # # # # #
bot = telebot.TeleBot(secret.tg_token)  # Token –±–æ—Ç–∞
bot.set_my_commands([
    telebot.types.BotCommand("/discount", "ü§ë–°–∫–∏–¥–∫–∏"),
    telebot.types.BotCommand("/usd", "üíµ –ö—É—Ä—Å —Ä—É–±–ª—è"),
    telebot.types.BotCommand("/who", "‚úÖ‚ùå–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"),
    telebot.types.BotCommand("/help", "‚ùì–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    telebot.types.BotCommand("/meeting", "üéß–°—Å—ã–ª–∫–∞ —à–æ–±–ª–æ—Å–æ–∑–≤–æ–Ω–∞"),
    telebot.types.BotCommand("/log", "üìã–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"),
    telebot.types.BotCommand("/stat", "ü§ñ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
    telebot.types.BotCommand("/rapid", "‚úÖ –ó–µ–ª–µ–Ω—ã–π Rapid"),
    telebot.types.BotCommand("/yapoznaumir", "üßê –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å")
])
activity_count = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
curr_meeting_poll = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ä–æ—Å—É
if os.path.isfile(constants.meeting_file):  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ meeting_file
    with open(constants.meeting_file, 'r') as lang:
        curr_meeting_poll = json.loads(lang.read())
meeting_results = [0, 0, 0, 0, 0, 0, 0, 0]  # –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –æ–ø—Ä–æ—Å–∞ –ø–æ —Å–æ–∑–≤–æ–Ω—É


# # # # # # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–∏–Ω–∏–∞–¥–º–∏–Ω–∫–∞ /s # # # # # #
# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º
def update_activity(field):
    global activity_count
    try:
        now_time = datetime.datetime.now()
        current_month = str(now_time.year) + '.' + str(now_time.month)
        if os.path.isfile(constants.activity_file):  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
            with open(constants.activity_file, 'r') as activity_file:
                activity_count = json.loads(activity_file.read())
        activity_count[current_month][field] += 1
        with open(constants.activity_file, 'w') as activity_file:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª activity_count
            activity_file.write(json.dumps(activity_count))
    except Exception as update_activity_error:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_activity:\n–ü–æ–ª–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(field, update_activity_error))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_activity:\n–ü–æ–ª–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{1}'.format(field, update_activity_error))


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏
def send_error(message, error_id, error_text):
    try:
        bot.send_message(secret.apple_id,
                         '‚ùå {0}\n–û—Ç: {1} {2}\nUsername: @{3}\n–ß–∞—Ç: {4} {5} {6}\nid: {7}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {8}\n–í—Ä–µ–º—è: {9}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: '
                         '{10}'.format(constants.errors[error_id], message.from_user.first_name, message.from_user.last_name, message.from_user.username,
                                       message.chat.title, message.chat.first_name, message.chat.last_name, message.chat.id, message.text,
                                       time.ctime(time.time()), error_text))
    except Exception as send_error_error:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_error:\n–°–æ–æ–±—â–µ–Ω–∏–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(message.text, send_error_error))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_error:\n–°–æ–æ–±—â–µ–Ω–∏–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{1}'.format(message.text, send_error_error))


# –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–∞–π–ª log.txt
def log(text):
    try:
        with open(constants.log_file, 'a') as log_file:
            log_file.write(time.ctime(time.time()) + ' - ' + text + '\n')
    except Exception as log_error:
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(log_error))


# –í—ã–∑–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –®–æ–±–ª—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ê–ø–æ–ª—É)
@bot.message_handler(commands=['s'])
def server_info(message):
    try:
        if message.from_user.id == secret.apple_id:  # –≠—Ç–æ –ê–ø–æ–ª
            try:
                if message.text == '/s':
                    bot.send_message(secret.apple_id, 'ü§ñ RAM free: {0}% –∏–∑ 512–ú–±–∞–π—Ç'.format(psutil.virtual_memory()[2]))
                    log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞')
                else:
                    bot.send_message(secret.tg_chat_id, message.text[3:len(message.text)])
            except Exception as ram_error:
                log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[21], ram_error))
                send_error(message, 21, ram_error)
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /s\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6], message.from_user.id, message.from_user.username))
            send_error(message, 6, 'N/A')
    except Exception as server_info_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[5], server_info_error))
        send_error(message, 5, server_info_error)


# # # # # # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã # # # # # #
# –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['yapoznaumir'])
def yapoznaumir(message):
    try:
        update_activity('yapoznaumir')
        log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /yapoznaumir by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
        bot.send_message(message.chat.id, constants.enter_question_gpt, reply_to_message_id=message.message_id, reply_markup=telebot.types.ForceReply(True))
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as yapoznaumir_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[32], yapoznaumir_error))
        send_error(message, 32, yapoznaumir_error)


# –í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è / —Å–ø—Ä–∞–≤–∫–∏
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    try:
        if message.chat.id == secret.tg_chat_id or message.from_user.id in constants.tg_ids:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã {0} by {1}'.format(message.text, constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_message(message.chat.id, constants.help_text, reply_markup=constants.help_keyboard, parse_mode='Markdown')
            update_activity(message.text[1:])
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã {0}\n{1}: User ID - {2}, user_name - @{3}'.format(message.text, constants.errors[0 if message.text == '/start' else 1],
                                                                                 message.from_user.id, message.from_user.username))
            bot.send_message(message.chat.id, constants.help_text_light, parse_mode='Markdown')
    except Exception as handle_start_help_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[0 if message.text == '/start' else 1], handle_start_help_error))
        send_error(message, 0 if message.text == '/start' else 1, handle_start_help_error)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç
@bot.message_handler(commands=['who'])
def who_will(message):
    try:
        update_activity('who')
        if message.chat.id == secret.tg_chat_id:  # –≠—Ç–æ –®–æ–±–ª–∞
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /who by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_message(secret.tg_chat_id, constants.enter_question_new, reply_to_message_id=message.message_id, reply_markup=telebot.types.ForceReply(True))
            bot.delete_message(secret.tg_chat_id, message.message_id)
        elif message.chat.id in constants.tg_ids:
            bot.send_message(message.chat.id, '‚ùå –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ [–®–æ–±–ª–µ](https://t.me/c/1126587083/)', parse_mode='Markdown')
    except Exception as who_will_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[7], who_will_error))
        send_error(message, 7, who_will_error)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∏–¥–æ–∫
@bot.message_handler(commands=['discount'])
def send_discount(message):
    try:
        if message.from_user.id in constants.tg_ids:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /discount by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            i = 0
            keyboard_start = telebot.types.InlineKeyboardMarkup(row_width=2)
            while i < len(constants.buttons[0]) - 1:
                keyboard_start.add(telebot.types.InlineKeyboardButton(text=constants.buttons[0][i + 1], callback_data=constants.buttons[1][i + 1]),
                                   telebot.types.InlineKeyboardButton(text=constants.buttons[0][i + 2], callback_data=constants.buttons[1][i + 2]))
                i += 2
            bot.send_message(message.chat.id, constants.buttons[2][0], reply_markup=keyboard_start, parse_mode='Markdown')
            update_activity('discount')
    except Exception as send_discount_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[8], send_discount_error))
        send_error(message, 8, send_discount_error)


# –í—ã–∑–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stat'])
def statistics(message):
    global activity_count
    try:
        if message.chat.id == secret.tg_chat_id or message.from_user.id in constants.tg_ids:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            now_time = datetime.datetime.now()
            cur_month = str(now_time.year) + '.' + str(now_time.month)
            if os.path.isfile(constants.activity_file):  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
                with open(constants.activity_file, 'r') as activity_file:
                    activity_count = json.loads(activity_file.read())
            month_statistics = constants.month_statistics.format(activity_count[cur_month]['opros'], activity_count[cur_month]['discount'],
                                                                 activity_count[cur_month]['car_girl'], activity_count[cur_month]['hey_doc'],
                                                                 activity_count[cur_month]['pin'], activity_count[cur_month]['rapid_new'],
                                                                 activity_count[cur_month]['cyk'], activity_count[cur_month]['russia'],
                                                                 activity_count[cur_month]['team'], activity_count[cur_month]['start'],
                                                                 activity_count[cur_month]['help'], activity_count[cur_month]['who'],
                                                                 activity_count[cur_month]['rapid'], activity_count[cur_month]['/29'],
                                                                 activity_count[cur_month]['kirov'], activity_count[cur_month]['damage'],
                                                                 activity_count[cur_month]['meeting'], activity_count[cur_month]['transl'],
                                                                 activity_count[cur_month]['mamma'], activity_count[cur_month]['usd'],
                                                                 activity_count[cur_month]['yapoznaumir'])
            bot.send_message(message.chat.id, month_statistics.replace('–ø—Ä–æ—à–ª—ã–π', '—Ç–µ–∫—É—â–∏–π'), parse_mode='Markdown')
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /stat\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6],
                                                                                   message.from_user.id,
                                                                                   message.from_user.username))
            send_error(message, 6, 'N/A')
    except Exception as statistics_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[4], statistics_error))
        send_error(message, 4, statistics_error)


# –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –ø–æ –±–æ—Ç—É
@bot.message_handler(commands=['log'])
def share_log(message):
    try:
        if message.chat.id == secret.tg_chat_id or message.from_user.id in constants.tg_ids:  # –≠—Ç–æ –®–æ–±–ª–∞ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            try:
                log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                bot.send_document(message.chat.id, open(constants.log_file, 'rb'), caption='ü§ñüìã')
            except Exception as upload_log_error:
                send_error(message, 23, upload_log_error)
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6], message.from_user.id, message.from_user.username))
            send_error(message, 6, 'N/A')
    except Exception as share_log_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[24], share_log_error))
        send_error(message, 24, share_log_error)


# –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É —Å–æ–∑–≤–æ–Ω–∞
@bot.message_handler(commands=['meeting'])
def meeting(message):
    try:
        if message.from_user.id in constants.tg_ids:  # –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /meeting by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_photo(message.chat.id, constants.meeting_pic, caption='ü§ñ *–ì–æ —Å–æ–∑–≤–æ–Ω*\n' + constants.meeting_link, parse_mode='Markdown')
            update_activity('meeting')
    except Exception as meeting_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[28], meeting_error))
        send_error(message, 28, meeting_error)


# –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ —Ä—É–±–ª—è
@bot.message_handler(commands=['usd'])
def usd(message):
    try:
        if message.from_user.id in constants.tg_ids:  # –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –®–æ–±–ª—ã
            dollar, euro, lari, tenge = cbr.getUSD("USD"), cbr.getUSD("EUR"), cbr.getUSD("GEL"), cbr.getUSD("KZT")
            float_dol = f"{float(dollar.replace(',', '.')):.{2}f}"
            float_eur = f"{float(euro.replace(',', '.')):.{2}f}"
            float_lar = f"{float(lari.replace(',', '.')):.{2}f}"
            float_ten = f"{float(tenge.replace(',', '.')):.{2}f}"
            bot.send_photo(message.chat.id, constants.usd_pic[random.randint(0, len(constants.usd_pic) - 1)],
                           caption="üíµ *–ö—É—Ä—Å —Ä—É–±–ª—è –ø–æ –¥–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞ [–¶–ë–†](https://www.cbr.ru/currency_base/daily/)*:\n"
                                   "`1$ = {0}‚ÇΩ`\n`1‚Ç¨ = {1}‚ÇΩ`\n`1‚Çæ = {2}‚ÇΩ`\n`100‚Ç∏ = {3}‚ÇΩ`".format(float_dol, float_eur, float_lar, float_ten), parse_mode='Markdown')
            update_activity('usd')
    except Exception as usd_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[31], usd_error))
        send_error(message, 31, usd_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ # # # # # #
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–≤–∫–∏ –∑–∞ —Ä—É–ª–µ–º
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace('a', '').replace('–∞', '') == '' and message.chat.id == secret.tg_chat_id)
def aaa(message):
    try:
        bot.send_message(secret.tg_chat_id, '–î–µ–≤–∫–∞ –∑–∞ —Ä—É–ª—ë–º') if len(message.text) > 2 else bot.send_message(secret.tg_chat_id, '–î–≤–∫ –∑ —Ä–ª–º')
        update_activity('car_girl')
    except Exception as aaa_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[9], aaa_error))
        send_error(message, 9, aaa_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ Emotional damage
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.damage and message.chat.id == secret.tg_chat_id)
def damage(message):
    try:
        bot.send_voice(secret.tg_chat_id, constants.emotional_daaamage)
        update_activity('damage')
    except Exception as damage_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[10], damage_error))
        send_error(message, 10, damage_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ mamma mia
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.mammamia and message.chat.id == secret.tg_chat_id)
def mamma_mia(message):
    try:
        audio = open(constants.mamma_audio_path, 'rb')
        bot.send_audio(message.chat.id, audio, reply_to_message_id=message.message_id)
        update_activity('mamma')
    except Exception as mamma_mia_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[30], mamma_mia_error))
        send_error(message, 30, mamma_mia_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–ê–°–ò–Ø
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.russia and message.chat.id == secret.tg_chat_id)
def russia(message):
    try:
        bot.send_voice(secret.tg_chat_id, constants.anthem, 'ü´°')
        update_activity('russia')
    except Exception as russia_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[11], russia_error))
        send_error(message, 11, russia_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—á–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.hey_doc and message.chat.id == secret.tg_chat_id)
def hey_doc(message):
    try:
        bot.send_document(secret.tg_chat_id, 'CgADAgADRgIAAkbDcEn-Ox-uqrgsHgI', caption='@oxy_genium')
        update_activity('hey_doc')
    except Exception as hey_doc_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[12], hey_doc_error))
        send_error(message, 12, hey_doc_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @team
@bot.message_handler(func=lambda message: message.text and constants.team in message.text.lower() and message.chat.id == secret.tg_chat_id)
def team(message):
    try:
        bot.send_message(chat_id=secret.tg_chat_id, disable_notification=False, reply_to_message_id=message.message_id,
                         text=constants.team_text, disable_web_page_preview=True, parse_mode='Markdown')
        update_activity('team')
    except Exception as team_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[14], team_error))
        send_error(message, 14, team_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @rapid
@bot.message_handler(func=lambda message: message.text and message.text.lower().startswith(constants.rapid) and message.chat.id == secret.tg_chat_id)
def rapid(message):
    value = ''
    try:
        update_activity('rapid')
        log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /rapid by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
        # –°–ø–ª–∏—Ç—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–ø–∏–ª–∏–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –±–æ–∫–∞–º
        data = message.text.lower().strip().split(" ")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        # –∏ –µ—Å–ª–∏ —Ç–æ–∫–∞ 1 —ç–ª–µ–º–µ–Ω—Ç —Ç–æ –∑–Ω–∞—á–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏
        # —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ help –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
        size = len(data)
        value = 'help' if size == 1 else data[1]

        # –ù—É —Ç—É—Ç –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–∫–∞ data[1] became value
        response = urllib2.urlopen(
            'https://rapid.zhuykovkb.ru/rapid?data=' + quote(value) + '&memberid=' + str(message.from_user.id))
        answer = json.loads(str(response.read(), 'utf-8'))
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§ó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—É —ç—Ç–æ—Ç –†–∞–ø–∏–¥, ||–ø—É—Å–µ—á–∫–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è',
                             parse_mode='Markdown')
        bot.send_message(secret.tg_chat_id, answer['message'], parse_mode='Markdown')
        if answer['message'] == '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω':
            log('–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –†–∞–ø–∏–¥–∞ by {0}'.format(
                constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            update_activity('rapid_new')
    except Exception as rapid_error:
        bot.send_message(secret.zhuykovkb_apple_id, '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rapid:\n\n–î–∞–Ω–Ω—ã–µ ' + quote(value) + '\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ ' + str(rapid_error))
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rapid:\n–î–∞–Ω–Ω—ã–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(quote(value), rapid_error))
        send_error(message, 15, rapid_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—É–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.suk and message.chat.id == secret.tg_chat_id)
def badger(message):
    try:
        bot.send_message(secret.tg_chat_id, '–ë–∞—Ä—Å—É–∫')
        update_activity('cyk')
    except Exception as badger_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[16], badger_error))
        send_error(message, 16, badger_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—é–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.syuk and message.chat.id == secret.tg_chat_id)
def another_badger(message):
    try:
        bot.send_message(secret.tg_chat_id, '–ë–∞—Ä—Å—é–∫')
        update_activity('cyk')
    except Exception as another_badger_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[17], another_badger_error))
        send_error(message, 17, another_badger_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≥–µ—è/–ª–µ—à—É
@bot.message_handler(func=lambda m: True)
def faggot_func(message):
    try:
        if random.random() < 0.3:
            eu_country = faggot.getFaggotEUCountryRequest(message.text, ['–≥–µ–π', '–ø–∏–¥–æ—Ä', '–ø–∏–¥—Ä', '–ø–µ–¥–∏–∫', '–≥–æ–º–æ', '–≥–æ–º–æ—Å–µ–∫', '–≥–ª–∏–Ω–æ–º–µ—Å',
                                                                         '–ø–∏–¥–µ—Ä–∞—Å—Ç', '–ª–µ—à–∞', '–ø—É—Ç–∏–Ω', '–ø—É—Ç–µ–Ω', '–ø—É—Ç–µ–π–Ω', '–º–∞—Ä–≥–∞—Ä–∏–Ω', '–ø—É—Ç–µ–Ω–∞'])
            if eu_country[0]:
                location = eu_country[1]['coords']
                bot.reply_to(message, '–¢—ã —á—Ç–æ —Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ –≥–µ—è? –î–µ—Ä–∂–∏...')
                bot.send_location(message.chat.id, location['lat'], location['lng'])
        kirov(message)
    except Exception as faggot_func_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[25], faggot_func_error))
        send_error(message, 25, faggot_func_error)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–∏—Ä–æ–≤–∞
@bot.message_handler(func=lambda m: True)
def kirov(message):
    try:
        if find_words.wordInMessage(message.text, constants.kirov):
            audio = open(constants.kirov_audio_path, 'rb')
            bot.send_audio(message.chat.id, audio, reply_to_message_id=message.message_id)
            update_activity('kirov')
        send_text(message)
    except Exception as kirov_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[27], kirov_error))
        send_error(message, 27, kirov_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ # # # # # #
@bot.poll_handler(func=lambda poll: True)
def poll_results(poll):
    try:
        if poll.is_closed == 1 and str(poll.id) == curr_meeting_poll['poll_id'] and poll.total_voter_count > 1:
            i = 0
            for item in poll.options:
                meeting_results[i] = int(item.voter_count)
                i += 1
            max_date = meeting_results[0:4].index(max(meeting_results[0:4]))
            max_time = meeting_results[4:].index(max(meeting_results[4:])) + 4
            curr_meeting_poll['max_date'], curr_meeting_poll['max_time'] = max_date, max_time
            with open(constants.meeting_file, 'w') as meeting_file:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª meeting_file
                meeting_file.write(json.dumps(curr_meeting_poll))
            log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π —Å–æ–∑–≤–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' + constants.meeting_options[max_time] + constants.meeting_options[max_date][4:])
            poll_results_msg = bot.send_message(secret.tg_chat_id,
                                                '–®–æ–±–ª—è—Ç–∫–∏, —Å–æ–∑–≤–æ–Ω –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –±—É–¥–µ—Ç –≤' + constants.meeting_options[max_date][4:] + ' ' + constants.meeting_options[max_time],
                                                parse_mode='Markdown')
            bot.pin_chat_message(secret.tg_chat_id, poll_results_msg.message_id, disable_notification=False)
    except Exception as poll_results_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[29], poll_results_error))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ poll_results:\n–°–æ–æ–±—â–µ–Ω–∏–µ: *{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{1}'.format(poll, poll_results_error))


# # # # # # –ü–æ–ª—É—á–∞–µ–Ω–∏–µ file_id –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ # # # # # #
@bot.message_handler(content_types=['photo', 'voice', 'document', 'animation'])
def send_media_id(message):
    try:
        if message.chat.id == secret.apple_id:
            if message.photo:
                bot.send_message(secret.apple_id, message.photo[2].file_id)
            elif message.voice:
                bot.send_message(secret.apple_id, message.voice.file_id)
            elif message.document:
                bot.send_message(secret.apple_id, message.document.file_id)
            elif message.animation:
                bot.send_message(secret.apple_id, message.animation.file_id)
    except Exception as send_media_id_error:
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_media_id:\n–°–æ–æ–±—â–µ–Ω–∏–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{1}'.format(message, send_media_id_error))


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–ø–ª–∞–µ–≤ –∏ # # # # # #
@bot.message_handler(content_types=['text'])
def send_text(message):
    try:
        text = message.text
        match = re.search(r'(instagram\.com/reel/\S+)', message.text)
        if translitsky.isTranslitsky(text) and text[0:4] != 'http':
            answer = translitsky.doTranslitskyRollback(text)
            bot.send_message(message.chat.id, "`{}`".format(answer), parse_mode='Markdown', reply_to_message_id=message.message_id)
            update_activity('transl')
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message is not None and text == '@shoblabot' and message.chat.id == secret.tg_chat_id:
            try:
                bot.pin_chat_message(chat_id=secret.tg_chat_id, message_id=message.reply_to_message.message_id, disable_notification=False)
                log('–ø–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                update_activity('pin')
            except Exception as pin_error:
                log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[26], pin_error))
                send_error(message, 26, pin_error)
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        elif message.reply_to_message is not None and message.reply_to_message.from_user.id == secret.bot_id:
            # –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞
            if message.reply_to_message.text == constants.enter_question_new or message.reply_to_message.text == constants.too_large_question:
                try:
                    if len(text) <= 291:
                        poll_text = constants.tg_names[constants.tg_ids.index(message.from_user.id)] + ': ' + text
                        poll = bot.send_poll(secret.tg_chat_id, poll_text, constants.poll_options, is_anonymous=False, allows_multiple_answers=False)
                        stop_button = telebot.types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å üö´',
                                                                         callback_data='stop_{0}_{1}'.format(poll.message_id, message.from_user.id))
                        keyboard_opros_stop = telebot.types.InlineKeyboardMarkup(row_width=1)
                        keyboard_opros_stop.add(stop_button)
                        bot.delete_message(secret.tg_chat_id, message.reply_to_message.message_id)
                        bot.edit_message_reply_markup(secret.tg_chat_id, poll.message_id, reply_markup=keyboard_opros_stop)
                        bot.delete_message(secret.tg_chat_id, message.message_id)
                        bot.pin_chat_message(secret.tg_chat_id, poll.message_id, disable_notification=False)
                        log('—Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                        update_activity('opros')
                    else:
                        force_reply = telebot.types.ForceReply(True)
                        bot.delete_message(secret.tg_chat_id, message.reply_to_message.message_id)
                        bot.send_message(message.chat.id, constants.too_large_question, reply_to_message_id=message.message_id, reply_markup=force_reply)
                except Exception as poll_reply_error:
                    log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[19], poll_reply_error))
                    send_error(message, 19, poll_reply_error)
            # –ï—Å–ª–∏ –≤–≤–æ–¥–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ–Ω–∫–µ
            elif message.reply_to_message.text == constants.enter_question_gpt:
                try:
                    response = g4f.ChatCompletion.create(model='gpt-3.5-turbo-16k', messages=[{"role": "user", "content": message.text}], stream=False)
                    bot.send_message(message.chat.id, response, parse_mode='Markdown')
                except Exception as g4f_error:
                    log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[32], g4f_error))
                    send_error(message, 32, g4f_error)
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–∑ Instagram
        elif match:
            new_url = re.sub(r'instagram\.com', 'ddinstagram.com', match.group(1))  # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–º–µ–Ω –Ω–∞ ddinstagram.com
            bot.send_message(message.chat.id, new_url, reply_to_message_id=message.message_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π
    except Exception as send_text_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[20], send_text_error))
        send_error(message, 20, send_text_error)


# # # # # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Call Back Data # # # # # #
@bot.callback_query_handler(func=lambda call: True)
def callback_buttons(call):
    try:
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
        if call.data[0:4] == 'stop':
            message_id = int(call.data.split('_')[1])
            user_id = int(call.data.split('_')[2])
            try:
                bot.stop_poll(secret.tg_chat_id, message_id) if call.from_user.id == user_id else bot.answer_callback_query(call.id, constants.wrong_stop, show_alert=True)
            except Exception as stop_opros_error:
                log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[22], stop_opros_error))
                send_error(call.message, 22, stop_opros_error)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∏–¥–æ–∫
        elif call.data[0:4] == 'disc':
            discount_id = int(call.data.split('_')[1])
            buttons_text = constants.buttons[0][0:discount_id] + constants.buttons[0][discount_id + 1:len(constants.buttons[0])]
            buttons_callback_data = constants.buttons[1][0:discount_id] + constants.buttons[1][discount_id + 1:len(constants.buttons[1])]
            keyboard_update = telebot.types.InlineKeyboardMarkup(row_width=2)
            i = 0
            while i < len(constants.buttons[0]) - 2:
                keyboard_update.add(telebot.types.InlineKeyboardButton(text=buttons_text[i], callback_data=buttons_callback_data[i]),
                                    telebot.types.InlineKeyboardButton(text=buttons_text[i + 1], callback_data=buttons_callback_data[i + 1]))
                i += 2
            # keyboard_update.add(constants.discounts, constants.channel)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=constants.buttons[2][discount_id],
                                  parse_mode='Markdown', reply_markup=keyboard_update)
    except Exception as callback_buttons_error:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[3], callback_buttons_error))
        send_error(call.message, 3, callback_buttons_error)


# # # # # # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π # # # # # #
def sdr():
    global curr_meeting_poll
    global activity_count
    try:
        threading.Timer(3600, sdr).start()  # –ö–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞ - 1800, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω - 600
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        if psutil.virtual_memory()[2] > 80:
            bot.send_message(secret.apple_id, '‚ÄºÔ∏è Oh shit, attention ‚ÄºÔ∏è\nüíæ Used RAM: {0}%'.format(psutil.virtual_memory()[2]), parse_mode='Markdown')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 1–æ–≥–æ —á–∏—Å–∞ –º–µ—Å—è—Ü–∞
        now_time = datetime.datetime.now()
        dr = str(now_time.day) + '.' + str(now_time.month)
        i = 0
        if os.path.isfile(constants.meeting_file):
            with open(constants.meeting_file, 'r') as meeting_file:
                curr_meeting_poll = json.loads(meeting_file.read())
        if now_time.hour != 9:
            if now_time.weekday() - 3 == curr_meeting_poll['max_date'] and now_time.hour - 13 == curr_meeting_poll['max_time'] and curr_meeting_poll['first_poll'] == 1:
                reminder = bot.send_message(secret.tg_chat_id, '–°–µ–≥–æ–¥–Ω—è —à–æ–±–ª–æ—Å–æ–∑–≤–æ–Ω –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å. –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É.', parse_mode='Markdown')
                bot.pin_chat_message(secret.tg_chat_id, reminder.message_id, disable_notification=False)
                log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π —Å–æ–∑–≤–æ–Ω')
            if now_time.weekday() - 3 == curr_meeting_poll['max_date'] and now_time.hour - 14 == curr_meeting_poll['max_time'] and curr_meeting_poll['first_poll'] == 1:
                photo = bot.send_photo(secret.tg_chat_id, constants.meeting_pic, caption='*–ì–æ —Å–æ–∑–≤–æ–Ω: *' + constants.meeting_link, parse_mode='Markdown')
                bot.pin_chat_message(secret.tg_chat_id, photo.message_id, disable_notification=False)
                curr_meeting_poll['first_poll'] = 0  # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                with open(constants.meeting_file, 'w') as meeting_file:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª meeting_file
                    meeting_file.write(json.dumps(curr_meeting_poll))
                log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π —Å–æ–∑–≤–æ–Ω')
            return
        else:
            if now_time.weekday() == 3 and now_time.day <= 7:  # –î–µ–Ω—å (—á–µ—Ç–≤–µ—Ä–≥) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–∑–≤–æ–Ω–µ
                meeting_poll = bot.send_poll(secret.tg_chat_id, constants.opros, constants.meeting_options, is_anonymous=False, allows_multiple_answers=True)
                bot.pin_chat_message(secret.tg_chat_id, meeting_poll.message_id, disable_notification=False)
                curr_meeting_poll['msg_id'] = meeting_poll.id
                curr_meeting_poll['poll_id'] = meeting_poll.poll.id
                curr_meeting_poll['max_date'] = 10
                curr_meeting_poll['max_time'] = 10
                curr_meeting_poll['first_poll'] = 1  # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                with open(constants.meeting_file, 'w') as meeting_file:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª meeting_file
                    meeting_file.write(json.dumps(curr_meeting_poll))
            if now_time.weekday() == 4 and now_time.day <= 7:  # –î–µ–Ω—å (–ø—è—Ç–Ω–∏—Ü–∞) –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–∑–≤–æ–Ω–µ
                if os.path.isfile(constants.meeting_file):
                    with open(constants.meeting_file, 'r') as meeting_file:
                        curr_meeting_poll = json.loads(meeting_file.read())
                try:
                    bot.stop_poll(secret.tg_chat_id, curr_meeting_poll['msg_id'])
                except Exception as stop_poll_error:
                    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞ –≤ sdr:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(stop_poll_error))
                    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞ –≤ sdr\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(stop_poll_error))
            if now_time.day == 1:  # –î–µ–Ω—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü –ú–µ—Å–µ—á–Ω–∞—è –¥–µ—Å—è—Ç–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
                cur_month = str(now_time.year - 1) + '.12' if now_time.month == 1 else str(now_time.year) + '.' + str(now_time.month - 1)
                if os.path.isfile(constants.activity_file):
                    with open(constants.activity_file, 'r') as activity_file:
                        activity_count = json.loads(activity_file.read())
                month_statistics = constants.month_statistics.format(activity_count[cur_month]['opros'], activity_count[cur_month]['discount'],
                                                                     activity_count[cur_month]['car_girl'], activity_count[cur_month]['hey_doc'],
                                                                     activity_count[cur_month]['pin'], activity_count[cur_month]['rapid_new'],
                                                                     activity_count[cur_month]['cyk'], activity_count[cur_month]['russia'],
                                                                     activity_count[cur_month]['team'], activity_count[cur_month]['start'],
                                                                     activity_count[cur_month]['help'], activity_count[cur_month]['who'],
                                                                     activity_count[cur_month]['rapid'], activity_count[cur_month]['/29'],
                                                                     activity_count[cur_month]['kirov'], activity_count[cur_month]['damage'],
                                                                     activity_count[cur_month]['meeting'], activity_count[cur_month]['transl'],
                                                                     activity_count[cur_month]['mamma'], activity_count[cur_month]['usd'],
                                                                     activity_count[cur_month]['yapoznaumir'])
                bot.send_message(secret.tg_chat_id, month_statistics, parse_mode='Markdown')
                # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 10—á–µ–ª–ª–µ–Ω–¥–∂
                challenge = bot.send_message(secret.tg_chat_id, 'üì∏ –®–æ–±–ª—è—Ç–∫–∏, –≤—Ä–µ–º—è –¥–ª—è #10—á–µ–ª–ª–µ–Ω–¥–∂ –∏ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –∑–∞ –º–µ—Å—è—Ü!', parse_mode='Markdown')
                bot.pin_chat_message(secret.tg_chat_id, challenge.message_id, disable_notification=False)
            if dr == str(28.5):  # –î–µ–Ω—å –ë–∞—è–Ω–∞ –≤ –®–æ–±–ª–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è 28 –º–∞—è
                bot.send_photo(secret.tg_chat_id, 'AgACAgIAAxkBAAJFzWLeYTbQ2ENcXEwoPOrRZprGCCUUAALHuTEb6BT4ShJZvIDQxNjZAQADAgADcwADKQQ', caption='ü™ó –®–æ–±–ª–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º –ë–∞—è–Ω–∞!')
            if dr == str(24.11):  # –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞
                bot.send_message(secret.tg_chat_id, 'ü•≥ –°–µ–≥–æ–¥–Ω—è –±–æ—Ç–∏–∫—É —É–∂–µ *{0} –ª–µ—Ç*!'.format(now_time.year - 2016), parse_mode='Markdown')
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –î–†
            for item in constants.tg_drs:
                if item[:-5] == dr and now_time.hour == 9:
                    if (now_time.year - int(item[-4:])) % 10 == 0:
                        bot.send_message(secret.tg_chat_id, 'ü•≥ [{0}](tg://user?id={1}), —Å –¥—Ä!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –∫–æ–º—É '
                                                            '–∑–∞ {2} üòè'.format(constants.tg_names[i], constants.tg_ids[i], now_time.year - int(item[-4:])),
                                         parse_mode='Markdown')
                    else:
                        bot.send_message(secret.tg_chat_id, 'ü•≥ [{0}](tg://user?id={1}), —Å –¥—Ä!'.format(constants.tg_names[i], constants.tg_ids[i]), parse_mode='Markdown')
                i += 1
    except Exception as sdr_error:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –®–æ–±–ª—É sdr:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(sdr_error))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –®–æ–±–ª—É sdr\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(sdr_error))


# # # # # # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π # # # # # #
try:
    sdr()
except Exception as e:
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ sdr:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ sdr\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(e))

try:
    log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ bot.infinity_polling()')
    bot.infinity_polling()
except Exception as e:
    with open(constants.log_file, 'a') as log_file_stream:
        traceback.print_exc(file=log_file_stream)
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(e))

try:
    with open(constants.log_file, 'a') as log_file_flow:
        log_file_flow.write('\nSTART\n' + time.ctime(time.time()) + ' - –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞\n')
except Exception as e:
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ start_time:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n' + str(e))
