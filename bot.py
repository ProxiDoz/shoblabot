#!/usr/bin/python3.8.9
# -*- coding: utf-8 -*-

# # # # # # –ò–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ # # # # # #
import os  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
import json  # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
import time  # –î–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
import psutil
import telebot
import datetime
import constants
import secret
import random
# import cherry
import threading
import urllib.request as urllib2  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ Telegram –≤ –®–æ–±–ª—É
from urllib.parse import quote

# # # # # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è # # # # # #
bot = telebot.TeleBot(secret.tg_token)  # Token –±–æ—Ç–∞
activity_count = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º


# # # # # # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã # # # # # #
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        if message.chat.id == secret.tg_chat_id or message.from_user.id in constants.tg_ids:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_message(secret.tg_requests_chat_id, 'üïπ [start](tg://user?id={0})'.format(message.from_user.id), parse_mode='Markdown')
            bot.send_message(message.chat.id, constants.help_text, disable_web_page_preview=True, parse_mode='Markdown')
            if message.from_user.is_premium and random.random() < 0.3:
                bot.send_message(message.chat.id, 'ü§° –ï–±–∞—Ç—å —Ç—ã –∫–æ–º–∞–Ω–¥—É –≤—ã–±—Ä–∞–ª, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
            update_activity('start')
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6], message.from_user.id, message.from_user.username))
            bot.send_message(message.chat.id, constants.help_text_light, parse_mode='MarkdownV2')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[0], e))
        send_error(message, 0, e)


# –í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
@bot.message_handler(commands=['help'])
def handle_help(message):
    try:
        if message.chat.id == secret.tg_chat_id or message.from_user.id in constants.tg_ids:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /help by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_message(secret.tg_requests_chat_id, '‚ùì [help](tg://user?id={0})'.format(message.from_user.id), parse_mode='Markdown')
            bot.send_message(message.chat.id, constants.help_text, reply_markup=constants.help_keyboard, parse_mode='Markdown')
            if message.from_user.is_premium and random.random() < 0.3:
                bot.send_message(message.chat.id, 'ü§° –¢–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
            update_activity('help')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[1], e))
        send_error(message, 1, e)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç
@bot.message_handler(commands=['who'])
def who_will(message):
    try:
        update_activity('who')
        if message.chat.id == secret.tg_chat_id:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /who by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            bot.send_message(secret.tg_requests_chat_id, '‚úÖ‚ùå [who](tg://user?id={0})'.format(str(message.from_user.id)), parse_mode='Markdown')
            force_reply = telebot.types.ForceReply(True)
            bot.send_message(secret.tg_chat_id, constants.enter_question_new, reply_to_message_id=message.message_id, reply_markup=force_reply)
            bot.delete_message(secret.tg_chat_id, message.message_id)
        elif message.chat.id in constants.tg_ids:
            bot.send_message(message.chat.id, '‚ùå –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ [–®–æ–±–ª–µ](https://t.me/c/1126587083/)', parse_mode='Markdown')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[7], e))
        send_error(message, 7, e)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∏–¥–æ–∫
@bot.message_handler(commands=['discount'])
def send_discount(message):
    try:
        if message.from_user.id in constants.tg_ids:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /discount by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            i = 0
            keyboard_start = telebot.types.InlineKeyboardMarkup(row_width=2)
            while i < len(constants.buttons[0]) - 1:
                keyboard_start.add(telebot.types.InlineKeyboardButton(text=constants.buttons[0][i + 1], callback_data=constants.buttons[1][i + 1]),
                                   telebot.types.InlineKeyboardButton(text=constants.buttons[0][i + 2], callback_data=constants.buttons[1][i + 2]))
                i += 2
            keyboard_start.add(constants.discounts, constants.channel)
            bot.send_message(message.chat.id, constants.buttons[2][0], reply_markup=keyboard_start, parse_mode='MarkdownV2')
            if message.from_user.is_premium and random.random() < 0.3:
                bot.send_message(message.chat.id, 'ü§° –°—ç–∫–æ–Ω–æ–º–∏—Ç—å —Ä–µ—à–∏–ª, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è?', parse_mode='MarkdownV2')
            update_activity('discount')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[8], e))
        send_error(message, 8, e)


# # # # # # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã # # # # # #
# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º
def update_activity(field):
    try:
        now_time = datetime.datetime.now()
        current_month = str(now_time.year) + '.' + str(now_time.month)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
        if os.path.isfile(constants.activity_file):
            with open(constants.activity_file, 'r') as lang:
                activity_count = json.loads(lang.read())
        activity_count[current_month][field] += 1
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª activity_count
        with open(constants.activity_file, 'w') as lang:
            lang.write(json.dumps(activity_count))
    except Exception as e:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_activity:\n–ü–æ–ª–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(field, e))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_activity:\n*–ü–æ–ª–µ: *{0}\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n{1}'.format(field, e),
                         parse_mode='MarkdownV2')


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏
def send_error(message, error_id, error):
    try:
        bot.send_message(secret.apple_id,
                         '‚ùå *{0}\n–û—Ç:* {1} {2}\n*Username:* @{3}\n*–ß–∞—Ç:* {4} {5} {6}\n*id:* {7}\n*–°–æ–æ–±—â–µ–Ω–∏–µ:* {8}\n'
                         '*–í—Ä–µ–º—è:* _{9}_\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:* _{10}_'.format(constants.errors[error_id], str(message.from_user.first_name),
                                                                   str(message.from_user.last_name), str(message.from_user.username),
                                                                   str(message.chat.title), str(message.chat.first_name),
                                                                   str(message.chat.last_name), str(message.chat.id), message.text,
                                                                   time.ctime(time.time()), error),
                         parse_mode='Markdown')
    except Exception as e:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_error:\n–°–æ–æ–±—â–µ–Ω–∏–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(message.text, e))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_error:\n*–°–æ–æ–±—â–µ–Ω–∏–µ: *{0}\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n{1}'.format(message.text, e),
                         parse_mode='MarkdownV2')


# –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª log.txt
def log(text):
    try:
        with open(constants.log_file, 'a') as log_file:
            log_file.write(time.ctime(time.time()) + ' - ' + text + '\n')
    except Exception as e:
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')


# –í—ã–∑–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stat'])
def statistics(message):
    try:
        now_time = datetime.datetime.now()
        current_month = str(now_time.year) + '.' + str(now_time.month)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
        if os.path.isfile(constants.activity_file):
            with open(constants.activity_file, 'r') as lang:
                activity_count = json.loads(lang.read())
        month_statistics = constants.month_statistics.format(activity_count[current_month]['opros'], activity_count[current_month]['discount'],
                                                             activity_count[current_month]['devka'], activity_count[current_month]['vracha'],
                                                             activity_count[current_month]['pin'], activity_count[current_month]['rapid_new'],
                                                             activity_count[current_month]['cyk'], activity_count[current_month]['russia'],
                                                             activity_count[current_month]['team'], activity_count[current_month]['start'],
                                                             activity_count[current_month]['help'], activity_count[current_month]['who'],
                                                             activity_count[current_month]['rapid'], activity_count[current_month]['/29'])
        bot.send_message(secret.apple_id, month_statistics, parse_mode='MarkdownV2')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[4], e))
        send_error(message, 4, e)


# –í—ã–∑–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
@bot.message_handler(commands=['s'])
def server_info(message):
    try:
        if message.chat.id == secret.apple_id:
            try:
                log('–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ RAM –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞')
                bot.send_message(message.chat.id, 'üíø Used RAM: {0}%\nüíæ Used disk: {1}%'.format(psutil.virtual_memory()[2], psutil.disk_usage('/')[3])) if message.text == '/s' else bot.send_message(secret.tg_chat_id, message.text[3:len(message.text)])
            except Exception as e:
                log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[21], e))
                send_error(message, 21, e)
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /s\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6], message.from_user.id, message.from_user.username))
            send_error(message, 6, 'N/A')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[5], e))
        send_error(message, 5, e)


# –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –ª–∏—á–∫—É
@bot.message_handler(commands=['log'])
def share_log(message):
    try:
        if message.chat.id == secret.apple_id:
            try:
                log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                bot.send_document(secret.apple_id, open(constants.log_file, 'rb'))
            except Exception as e:
                send_error(message, 23, e)
        else:
            log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /log\n{0}: User ID - {1}, user_name - @{2}'.format(constants.errors[6], message.from_user.id, message.from_user.username))
            send_error(message, 6, 'N/A')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[24], e))
        send_error(message, 24, e)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ # # # # # #
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–≤–æ–∫ –∑–∞ —Ä—É–ª–µ–º
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.dvk and message.chat.id == secret.tg_chat_id)
def aaa(message):
    try:
        bot.send_message(secret.tg_chat_id, '–î–≤–∫ –∑ —Ä–ª–º')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ü–æ–ª—É—á–∞–π —Å–≤–æ—é –¥–µ–≤–∫—É, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        update_activity('devka')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[9], e))
        send_error(message, 9, e)


@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.devka and message.chat.id == secret.tg_chat_id)
def aaaa(message):
    try:
        bot.send_message(secret.tg_chat_id, '–î–µ–≤–∫–∞ –∑–∞ —Ä—É–ª—ë–º')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ü–æ–ª—É—á–∞–π —Å–≤–æ—é –¥–µ–≤–∫—É, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        update_activity('devka')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[10], e))
        send_error(message, 10, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–ê–°–ò–Ø
@bot.message_handler(func=lambda message: message.text and message.text.lower().replace(' ', '').replace('\n', '') in constants.russia and message.chat.id == secret.tg_chat_id)
def russia(message):
    try:
        bot.send_voice(secret.tg_chat_id, constants.anthem, 'ü´°')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ï–±–∞—Ç—å —Ç—ã –ø–∞—Ç—Ä–∏–æ—Ç, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        update_activity('russia')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[11], e))
        send_error(message, 11, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—á–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.vracha and message.chat.id == secret.tg_chat_id)
def vracha(message):
    try:
        bot.send_document(secret.tg_chat_id, 'CgADAgADRgIAAkbDcEn-Ox-uqrgsHgI', caption='@oxy_genium')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ê —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ª–µ—á–∏—Ç –æ—Ç –≤—Å–µ—Ö –±–æ–ª–µ–∑–Ω–µ–π, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è?', parse_mode='MarkdownV2')
        update_activity('vracha')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[12], e))
        send_error(message, 12, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏—Ç–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.git and message.chat.id == secret.tg_chat_id)
def git(message):
    try:
        bot.send_message(secret.tg_chat_id, '–•—É–∏—Ç')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ï–±–∞—Ç—å —Ç—ã –ø—Ä–æ–≥—Ä–∞–º–µ—Å, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        update_activity('git')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[13], e))
        send_error(message, 13, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @team
@bot.message_handler(func=lambda message: message.text and constants.team in message.text.lower() and message.chat.id == secret.tg_chat_id)
def team(message):
    try:
        bot.send_message(chat_id=secret.tg_chat_id, disable_notification=False, reply_to_message_id=message.message_id, text=constants.team_text,
                         disable_web_page_preview=True, parse_mode='Markdown')
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –¢—ã —Ç—É—Ç –Ω–∏–∫–æ–º—É –Ω–µ —É–ø—ë—Ä—Å—è, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        update_activity('team')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[14], e))
        send_error(message, 14, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ @rapid
@bot.message_handler(func=lambda message: message.text and message.text.lower().startswith(constants.rapid) and message.chat.id == secret.tg_chat_id)
def rapid(message):
    try:
        update_activity('rapid')
        log('–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /rapid by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
        # –°–ø–ª–∏—Ç—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—ã–ø–∏–ª–∏–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –±–æ–∫–∞–º
        data = message.text.lower().strip().split(" ")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        # –∏ –µ—Å–ª–∏ —Ç–æ–∫–∞ 1 —ç–ª–µ–º–µ–Ω—Ç —Ç–æ –∑–Ω–∞—á–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏
        # —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ help –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
        size = len(data)
        value = 'help' if size == 1 else data[1]

        # –ù—É —Ç—É—Ç –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–∫–∞ data[1] became value
        response = urllib2.urlopen('https://bot.zhuykovkb.ru:81/rapid?data=' + quote(value) + '&memberid=' + str(message.from_user.id))
        answer = json.loads(str(response.read(), 'utf-8'))
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –î–∞ –≤–æ—Ç —Ç–µ–±–µ –Ω–µ –Ω–∞—Å—Ç—Ä–∞—Ç—å –Ω–∞ —Ä–∞–ø–∏–¥—ã, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è?', parse_mode='MarkdownV2')
        bot.send_message(secret.tg_chat_id, answer['message'], parse_mode='Markdown')
        if answer['message'] == '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω':
            log('–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –†–∞–ø–∏–¥–∞ by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            update_activity('rapid_new')
    except Exception as e:
        bot.send_message(secret.zhuykovkb_apple_id, '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rapid:\n\n–î–∞–Ω–Ω—ã–µ ' + quote(value) + '\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ ' + str(e))
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rapid:\n–î–∞–Ω–Ω—ã–µ: {0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(quote(value), e))
        send_error(message, 15, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—É–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.suk and message.chat.id == secret.tg_chat_id)
def barsuk(message):
    try:
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –•—É–π —Ç–µ–±–µ, –∞ –Ω–µ –±–∞—Ä—Å—É–∫–∞, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        else:
            bot.send_message(secret.tg_chat_id, '–ë–∞—Ä—Å—É–∫')
            update_activity('cyk')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[16], e))
        send_error(message, 16, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ä—Å—é–∫–∞
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.syuk and message.chat.id == secret.tg_chat_id)
def barsyuk(message):
    try:
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –•—É–π —Ç–µ–±–µ, –∞ –Ω–µ –±–∞—Ä—Å—é–∫–∞, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        else:
            bot.send_message(secret.tg_chat_id, '–ë–∞—Ä—Å—é–∫')
            update_activity('cyk')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[17], e))
        send_error(message, 17, e)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ IPv6
@bot.message_handler(func=lambda message: message.text and message.text.lower() in constants.ip_block and message.chat.id == secret.tg_chat_id)
def block(message):
    try:
        if message.from_user.is_premium and random.random() < 0.3:
            bot.send_message(message.chat.id, 'ü§° –ó–Ω–∞—á–∏—Ç —Ç–∞–∫, \- —Å—Ä–∞–∑—É –Ω–∞—Ö—É–π, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
        else:
            bot.send_message(secret.tg_chat_id, '*–ó–Ω–∞—á–∏—Ç —Ç–∞–∫, \- —Å—Ä–∞–∑—É ||–Ω–∞—Ö—É–π||\!*', parse_mode='MarkdownV2')
        update_activity('/29')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[18], e))
        send_error(message, 18, e)


# # # # # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–ª–∞–µ–≤ # # # # # #
@bot.message_handler(content_types=['text'])
def send_text(message):
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message is not None and message.reply_to_message.from_user.id == secret.bot_id:
            # –ó–∞–ø—Ä–æ—Å –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–Ω–æ–≤–æ–≥–æ)
            if message.reply_to_message.text == constants.enter_question_new or message.reply_to_message.text == constants.too_large_question:
                try:
                    if len(message.text) <= 291:
                        opros = constants.tg_names[constants.tg_ids.index(message.from_user.id)] + ': ' + message.text
                        poll = bot.send_poll(secret.tg_chat_id, opros, constants.poll_options, is_anonymous=False, allows_multiple_answers=False)
                        stop_button = telebot.types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å üö´',
                                                                         callback_data='stop_{0}_{1}'.format(
                                                                             poll.message_id, message.from_user.id))
                        keyboard_opros_stop = telebot.types.InlineKeyboardMarkup(row_width=1)
                        keyboard_opros_stop.add(stop_button)
                        if message.from_user.is_premium and random.random() < 0.3:
                            bot.send_message(message.chat.id, 'ü§° –î–∞ –≤—Å–µ–º –Ω–∞—Å—Ä–∞—Ç—å –Ω–∞ —Ç–≤–æ–π –æ–ø—Ä–æ—Å, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
                        bot.delete_message(secret.tg_chat_id, message.reply_to_message.message_id)
                        bot.edit_message_reply_markup(secret.tg_chat_id, poll.message_id, reply_markup=keyboard_opros_stop)
                        bot.delete_message(secret.tg_chat_id, message.message_id)
                        bot.pin_chat_message(secret.tg_chat_id, poll.message_id, disable_notification=False)
                        log('—Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                        update_activity('opros')
                    else:
                        force_reply = telebot.types.ForceReply(True)
                        bot.delete_message(secret.tg_chat_id, message.reply_to_message.message_id)
                        bot.send_message(message.chat.id, constants.too_large_question, reply_to_message_id=message.message_id,
                                         reply_markup=force_reply)
                except Exception as e:
                    log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[19], e))
                    send_error(message, 19, e)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif message.text == '@shoblabot':
                bot.pin_chat_message(chat_id=secret.tg_chat_id, message_id=message.reply_to_message.message_id,
                                     disable_notification=False)
                if message.from_user.is_premium and random.random() < 0.3:
                    bot.send_message(message.chat.id, 'ü§° –ñ–æ–ø—É —Å–µ–±–µ –∑–∞–ø–∏–Ω—å, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
                log('–ø–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
                update_activity('pin')
        elif message.reply_to_message is not None and message.text == '@shoblabot':
            bot.pin_chat_message(chat_id=secret.tg_chat_id, message_id=message.reply_to_message.message_id,
                                 disable_notification=False)
            if message.from_user.is_premium and random.random() < 0.3:
                bot.send_message(message.chat.id, 'ü§° –ñ–æ–ø—É —Å–µ–±–µ –∑–∞–ø–∏–Ω—å, ||–ø—Å–∏–Ω–∞|| –ø—Ä–µ–º–∏—É–º–Ω–∞—è', parse_mode='MarkdownV2')
            log('–ø–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è by {0}'.format(constants.tg_names[constants.tg_ids.index(message.from_user.id)]))
            update_activity('pin')
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[20], e))
        send_error(message, 20, e)


# # # # # # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Call Back Data # # # # # #
@bot.callback_query_handler(func=lambda call: True)
def callback_buttons(call):
    try:
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
        if call.data[0:4] == 'stop':
            message_id = int(call.data.split('_')[1])
            user_id = int(call.data.split('_')[2])
            try:
                bot.stop_poll(secret.tg_chat_id, message_id) if call.from_user.id == user_id else bot.answer_callback_query(call.id,
                                                                                                                            constants.wrong_stop,
                                                                                                                            show_alert=True)
            except Exception as e:
                log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[22], e))
                send_error(call.message, 22, e)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∏–¥–æ–∫
        elif call.data[0:4] == 'disc':
            if call.from_user.is_premium and random.random() < 0.3:
                bot.answer_callback_query(call.id, 'ü§° –ü—Å–∏–Ω–∞ –ø—Ä–µ–º–∏—É–º–Ω–∞—è')
            discount_id = int(call.data.split('_')[1])
            buttons_text = constants.buttons[0][0:discount_id] + constants.buttons[0][discount_id + 1:len(constants.buttons[0])]
            buttons_callback_data = constants.buttons[1][0:discount_id] + constants.buttons[1][discount_id + 1:len(constants.buttons[1])]
            keyboard_update = telebot.types.InlineKeyboardMarkup(row_width=2)
            i = 0
            while i < len(constants.buttons[0]) - 2:
                keyboard_update.add(telebot.types.InlineKeyboardButton(text=buttons_text[i], callback_data=buttons_callback_data[i]),
                                    telebot.types.InlineKeyboardButton(text=buttons_text[i + 1], callback_data=buttons_callback_data[i + 1]))
                i += 2
            keyboard_update.add(constants.discounts, constants.channel)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=constants.buttons[2][discount_id],
                                  parse_mode='MarkdownV2', reply_markup=keyboard_update)
    except Exception as e:
        log('{0}\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {1}'.format(constants.errors[3], e))
        send_error(call.message, 3, e)


# # # # # # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π # # # # # #
def sdr():
    try:
        threading.Timer(3600, sdr).start()  # –ö–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞ - 1800, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω - 600
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        if psutil.virtual_memory()[2] > 80:
            bot.send_message(secret.apple_id, '‚ÄºÔ∏è Oh shit, attention ‚ÄºÔ∏è\nüíæ Used RAM: {0}%'.format(psutil.virtual_memory()[2]),
                             parse_mode='MarkdownV2')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 1–æ–≥–æ —á–∏—Å–∞ –º–µ—Å—è—Ü–∞
        now_time = datetime.datetime.now()
        dr = str(now_time.day) + '.' + str(now_time.month)
        i = 0
        if now_time.hour != 10:
            return
        if now_time.day == 1:  # –î–µ–Ω—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É –≤—ã–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü –ú–µ—Å–µ—á–Ω–∞—è –¥–µ—Å—è—Ç–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂
            cur_mnth = str(now_time.year - 1) + '.12' if now_time.month == 1 else str(now_time.year) + '.' + str(now_time.month - 1)
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ activity_count
            if os.path.isfile(constants.activity_file):
                with open(constants.activity_file, 'r') as lang:
                    activity_count = json.loads(lang.read())
            month_statistics = constants.month_statistics.format(activity_count[cur_mnth]['opros'], activity_count[cur_mnth]['discount'],
                                                                 activity_count[cur_mnth]['devka'], activity_count[cur_mnth]['vracha'],
                                                                 activity_count[cur_mnth]['pin'], activity_count[cur_mnth]['rapid_new'],
                                                                 activity_count[cur_mnth]['cyk'], activity_count[cur_mnth]['russia'],
                                                                 activity_count[cur_mnth]['team'], activity_count[cur_mnth]['start'],
                                                                 activity_count[cur_mnth]['help'], activity_count[cur_mnth]['who'],
                                                                 activity_count[cur_mnth]['rapid'], activity_count[cur_mnth]['/29'])
            bot.send_message(secret.tg_chat_id, month_statistics, parse_mode='Markdown')
            # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ 10—á–µ–ª–ª–µ–Ω–¥–∂
            challenge = bot.send_message(secret.tg_chat_id, 'üì∏ –®–æ–±–ª—è—Ç–∫–∏, –≤—Ä–µ–º—è –¥–ª—è #10—á–µ–ª–ª–µ–Ω–¥–∂ –∏ –≤—ã—à–∏—Ö —Ñ–æ—Ç–æ—á–µ–∫ –∑–∞ –º–µ—Å—è—Ü!', parse_mode='MarkdownV2')
            bot.pin_chat_message(secret.tg_chat_id, challenge.message_id, disable_notification=False)
        # –î–µ–Ω—å –ë–∞—è–Ω–∞ –≤ –®–æ–±–ª–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è 28 –º–∞—è
        if dr == str(28.5):
            bot.send_message(secret.tg_chat_id, 'ü™ó –®–æ–±–ª–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º –ë–∞—è–Ω–∞!')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –î–†
        for item in constants.tg_drs:
            if item == dr:
                bot.send_message(secret.tg_chat_id,
                                 'ü•≥ [{0}](tg://user?id={1}), —Å –¥—Ä\!'.format(constants.tg_names[i], constants.tg_ids[i]), parse_mode='MarkdownV2')
            i += 1
    except Exception as e:
        log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –®–æ–±–ª—É sdr:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
        bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –®–æ–±–ª—É sdr\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')


# # # # # # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π # # # # # #
try:
    bot.remove_webhook()
except Exception as e:
    log('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ bot.remove_webhook:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ bot.remove_webhook\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')

try:
    sdr()
except Exception as e:
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ sdr:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ sdr\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')

try:
    with open(constants.log_file, 'a') as log_file:
        log_file.write('\nSTART\n' + time.ctime(time.time()) + ' - –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞\n')
    # bot.send_message(secret.tg_test_chat_id, '‚è≥ *–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:* _{0}_'.format(time.ctime(time.time())), parse_mode='MarkdownV2')
except Exception as e:
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ start_time:\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')

try:
    log('–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ bot.infinity_polling()')
    bot.infinity_polling()
except Exception as e:
    log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling:\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ' + str(e))
    bot.send_message(secret.apple_id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot.polling\n*–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:*\n' + str(e), parse_mode='MarkdownV2')


# class WebhookServer(object):
#     # index —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ /, —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ ip-–∞–¥—Ä–µ—Å–∞ (–≥—Ä—É–±–æ –≥–æ–≤–æ—Ä—è)
#     @cherrypy.expose
#     def index(self):
#         length = int(cherrypy.request.headers['content-length'])
#         json_string = cherrypy.request.body.read(length).decode("utf-8")
#         update = telebot.types.Update.de_json(json_string)
#         bot.process_new_updates([update])
#         return ''
#
# if __name__ == '__main__':
#     cherrypy.config.update({
#         'server.socket_host': '127.0.0.1',
#         'server.socket_port': 7771,
#         'engine.autoreload.on': False
#     })
#     cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
